/**
 */
package org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.util.CoreElementsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CoreElementsItemProviderAdapterFactory extends CoreElementsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CoreElementsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgFunctionItemProvider ggFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgFunctionAdapter() {
		if (ggFunctionItemProvider == null) {
			ggFunctionItemProvider = new GgFunctionItemProvider(this);
		}

		return ggFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgLevelItemProvider ggLevelItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgLevelAdapter() {
		if (ggLevelItemProvider == null) {
			ggLevelItemProvider = new GgLevelItemProvider(this);
		}

		return ggLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgDecisionFrame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgDecisionFrameItemProvider ggDecisionFrameItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgDecisionFrame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgDecisionFrameAdapter() {
		if (ggDecisionFrameItemProvider == null) {
			ggDecisionFrameItemProvider = new GgDecisionFrameItemProvider(this);
		}

		return ggDecisionFrameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInformationFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgInformationFlowItemProvider ggInformationFlowItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInformationFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgInformationFlowAdapter() {
		if (ggInformationFlowItemProvider == null) {
			ggInformationFlowItemProvider = new GgInformationFlowItemProvider(this);
		}

		return ggInformationFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgDecisionCenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgDecisionCenterItemProvider ggDecisionCenterItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgDecisionCenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgDecisionCenterAdapter() {
		if (ggDecisionCenterItemProvider == null) {
			ggDecisionCenterItemProvider = new GgDecisionCenterItemProvider(this);
		}

		return ggDecisionCenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgTimeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgTimeValueItemProvider ggTimeValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgTimeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgTimeValueAdapter() {
		if (ggTimeValueItemProvider == null) {
			ggTimeValueItemProvider = new GgTimeValueItemProvider(this);
		}

		return ggTimeValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgExternalInformationSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgExternalInformationSourceItemProvider ggExternalInformationSourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgExternalInformationSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgExternalInformationSourceAdapter() {
		if (ggExternalInformationSourceItemProvider == null) {
			ggExternalInformationSourceItemProvider = new GgExternalInformationSourceItemProvider(this);
		}

		return ggExternalInformationSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInternalInformationSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgInternalInformationSourceItemProvider ggInternalInformationSourceItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInternalInformationSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgInternalInformationSourceAdapter() {
		if (ggInternalInformationSourceItemProvider == null) {
			ggInternalInformationSourceItemProvider = new GgInternalInformationSourceItemProvider(this);
		}

		return ggInternalInformationSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInformationCenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgInformationCenterItemProvider ggInformationCenterItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgInformationCenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgInformationCenterAdapter() {
		if (ggInformationCenterItemProvider == null) {
			ggInformationCenterItemProvider = new GgInformationCenterItemProvider(this);
		}

		return ggInformationCenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgCollaborativeDecision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GgCollaborativeDecisionItemProvider ggCollaborativeDecisionItemProvider;

	/**
	 * This creates an adapter for a {@link org.msee.slmtoolbox.modeling.model.lang.graiGrid.coreElements.GgCollaborativeDecision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGgCollaborativeDecisionAdapter() {
		if (ggCollaborativeDecisionItemProvider == null) {
			ggCollaborativeDecisionItemProvider = new GgCollaborativeDecisionItemProvider(this);
		}

		return ggCollaborativeDecisionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ggFunctionItemProvider != null) ggFunctionItemProvider.dispose();
		if (ggLevelItemProvider != null) ggLevelItemProvider.dispose();
		if (ggDecisionFrameItemProvider != null) ggDecisionFrameItemProvider.dispose();
		if (ggInformationFlowItemProvider != null) ggInformationFlowItemProvider.dispose();
		if (ggCollaborativeDecisionItemProvider != null) ggCollaborativeDecisionItemProvider.dispose();
		if (ggDecisionCenterItemProvider != null) ggDecisionCenterItemProvider.dispose();
		if (ggTimeValueItemProvider != null) ggTimeValueItemProvider.dispose();
		if (ggExternalInformationSourceItemProvider != null) ggExternalInformationSourceItemProvider.dispose();
		if (ggInternalInformationSourceItemProvider != null) ggInternalInformationSourceItemProvider.dispose();
		if (ggInformationCenterItemProvider != null) ggInformationCenterItemProvider.dispose();
	}

}
